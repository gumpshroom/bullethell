if (theta < 0) {
                theta += TWO_PI;
            }
            theta %= TWO_PI;
            if (x < mx) {
                //reset angle to [0, 2pi]
                if (-Math.asin((y - my) / distance(x, y, mx, my)) < 0) {
                    pTheta = -Math.asin((y - my) / distance(x, y, mx, my)) + TWO_PI;
                } else {
                    pTheta = -Math.asin((y - my) / distance(x, y, mx, my));
                }
                //tracking code
                if (y > my) {
                    if (theta > pTheta) {
                        if (theta - aimSpeed < pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta -= aimSpeed;
                        }
                    } else if (pTheta - theta < PI) {
                        if (theta + aimSpeed > pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta += aimSpeed;
                        }
                    } else {
                        if (theta - aimSpeed < pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta -= aimSpeed;
                        }
                    }
                } else {
                    pTheta = -Math.asin((y - my) / distance(x, y, mx, my));
                    if (theta < pTheta) {
                        if (theta + aimSpeed > pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta += aimSpeed;
                        }
                    } else if (theta - pTheta < PI) {
                        if (theta - aimSpeed < pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta -= aimSpeed;
                        }
                    } else {
                        if (theta + aimSpeed > pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta += aimSpeed;
                        }
                    }
                }
            } else {
                pTheta = PI + Math.asin((y - my) / distance(x, y, mx, my));
                if (y < my) {
                    if (theta < pTheta) {
                        if (theta + aimSpeed > pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta += aimSpeed;
                        }
                    } else if (theta - pTheta < PI) {
                        if (theta - aimSpeed < pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta -= aimSpeed;
                        }
                    } else {
                        if (theta + aimSpeed > pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta += aimSpeed;
                        }
                    }
                } else {
                    if (theta > pTheta) {
                        if (theta - aimSpeed < pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta -= aimSpeed;
                        }
                    } else if (pTheta - theta < PI) {
                        if (theta + aimSpeed > pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta += aimSpeed;
                        }
                    } else {
                        if (theta - aimSpeed < pTheta && Math.abs(pTheta - theta) < PI) {
                            theta = pTheta;
                        } else {
                            theta -= aimSpeed;
                        }
                    }
                }
            }